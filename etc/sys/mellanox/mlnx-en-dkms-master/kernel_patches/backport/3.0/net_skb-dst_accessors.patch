From: Sven-Thorsten Dietrich <sdietrich@suse.de>
Subject: Forward-port new accessor for net: dst.

See Kernel.org:
commit adf30907d63893e4208dfe3f5c88ae12bc2f25d5
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Tue Jun 2 05:19:30 2009 +0000
Subject: net: skb->dst accessors

Signed-off-by: Sven-Thorsten Dietrich <sdietrich@suse.de>
Index: ofed_kernel-3.0/drivers/infiniband/ulp/ipoib/ipoib_cm.c
===================================================================
--- ofed_kernel-3.0.orig/drivers/infiniband/ulp/ipoib/ipoib_cm.c	2012-07-25 18:07:06.000000000 +0300
+++ ofed_kernel-3.0/drivers/infiniband/ulp/ipoib/ipoib_cm.c	2012-07-25 18:10:10.000000000 +0300
@@ -1396,7 +1396,7 @@ static void ipoib_cm_update_pmtu_task(st
 		container_of(work, struct ipoib_pmtu_update, work);
 	struct sk_buff *skb = pmtu_update->skb;
 
-	skb->dst->ops->update_pmtu(skb->dst, pmtu_update->mtu);
+	skb_dst(skb)->ops->update_pmtu(skb_dst(skb), pmtu_update->mtu);
 
 	atomic_dec(&skb->users);
 
@@ -1410,7 +1410,7 @@ void ipoib_cm_skb_too_long(struct net_de
 	int e = skb_queue_empty(&priv->cm.skb_queue);
 	struct ipoib_pmtu_update *pmtu_update;
 
-	if (skb->dst) {
+	if (skb_dst(skb)) {
 		/* take the pmtu_update ouf ot spin-lock context */
 		pmtu_update = kzalloc(sizeof *pmtu_update, GFP_ATOMIC);
 		if (pmtu_update) {
Index: ofed_kernel-3.0/drivers/infiniband/ulp/ipoib/ipoib_main.c
===================================================================
--- ofed_kernel-3.0.orig/drivers/infiniband/ulp/ipoib/ipoib_main.c	2012-07-25 18:07:06.000000000 +0300
+++ ofed_kernel-3.0/drivers/infiniband/ulp/ipoib/ipoib_main.c	2012-07-25 18:07:36.000000000 +0300
@@ -605,7 +605,7 @@ static void neigh_add_path(struct sk_buf
 	struct ipoib_neigh *neigh;
 	unsigned long flags;
 
-	neigh = ipoib_neigh_alloc(skb->dst->neighbour, skb->dev);
+	neigh = ipoib_neigh_alloc(skb_dst(skb)->neighbour, skb->dev);
 	if (!neigh) {
 		++dev->stats.tx_dropped;
 		dev_kfree_skb_any(skb);
@@ -614,9 +614,9 @@ static void neigh_add_path(struct sk_buf
 
 	spin_lock_irqsave(&priv->lock, flags);
 
-	path = __path_find(dev, skb->dst->neighbour->ha + 4);
+	path = __path_find(dev, skb_dst(skb)->neighbour->ha + 4);
 	if (!path) {
-		path = path_rec_create(dev, skb->dst->neighbour->ha + 4);
+		path = path_rec_create(dev, skb_dst(skb)->neighbour->ha + 4);
 		if (!path)
 			goto err_path;
 
@@ -649,7 +649,7 @@ static void neigh_add_path(struct sk_buf
 				goto err_drop;
 			}
 		} else
-			ipoib_send(dev, skb, path->ah, IPOIB_QPN(skb->dst->neighbour->ha));
+			ipoib_send(dev, skb, path->ah, IPOIB_QPN(skb_dst(skb)->neighbour->ha));
 	} else {
 		neigh->ah  = NULL;
 
@@ -679,15 +679,15 @@ static void ipoib_path_lookup(struct sk_
 	struct ipoib_dev_priv *priv = netdev_priv(skb->dev);
 
 	/* Look up path record for unicasts */
-	if (skb->dst->neighbour->ha[4] != 0xff) {
+	if (skb_dst(skb)->neighbour->ha[4] != 0xff) {
 		neigh_add_path(skb, dev);
 		return;
 	}
 
 	/* Add in the P_Key for multicasts */
-	skb->dst->neighbour->ha[8] = (priv->pkey >> 8) & 0xff;
-	skb->dst->neighbour->ha[9] = priv->pkey & 0xff;
-	ipoib_mcast_send(dev, skb->dst->neighbour->ha + 4, skb);
+	skb_dst(skb)->neighbour->ha[8] = (priv->pkey >> 8) & 0xff;
+	skb_dst(skb)->neighbour->ha[9] = priv->pkey & 0xff;
+	ipoib_mcast_send(dev, skb_dst(skb)->neighbour->ha + 4, skb);
 }
 
 static void unicast_arp_send(struct sk_buff *skb, struct net_device *dev,
@@ -752,16 +752,16 @@ static int ipoib_start_xmit(struct sk_bu
 	struct ipoib_neigh *neigh;
 	unsigned long flags;
 
-	if (likely(skb->dst && skb->dst->neighbour)) {
-		if (unlikely(!*to_ipoib_neigh(skb->dst->neighbour))) {
+	if (likely(skb_dst(skb) && skb_dst(skb)->neighbour)) {
+		if (unlikely(!*to_ipoib_neigh(skb_dst(skb)->neighbour))) {
 			ipoib_path_lookup(skb, dev);
 			return NETDEV_TX_OK;
 		}
 
-		neigh = *to_ipoib_neigh(skb->dst->neighbour);
+		neigh = *to_ipoib_neigh(skb_dst(skb)->neighbour);
 
 		if (unlikely((memcmp(&neigh->dgid.raw,
-				     skb->dst->neighbour->ha + 4,
+				     skb_dst(skb)->neighbour->ha + 4,
 				     sizeof(union ib_gid))) ||
 			     (neigh->dev != dev))) {
 			spin_lock_irqsave(&priv->lock, flags);
@@ -787,7 +787,7 @@ static int ipoib_start_xmit(struct sk_bu
 				return NETDEV_TX_OK;
 			}
 		} else if (neigh->ah) {
-			ipoib_send(dev, skb, neigh->ah, IPOIB_QPN(skb->dst->neighbour->ha));
+			ipoib_send(dev, skb, neigh->ah, IPOIB_QPN(skb_dst(skb)->neighbour->ha));
 			return NETDEV_TX_OK;
 		}
 
@@ -816,7 +816,7 @@ static int ipoib_start_xmit(struct sk_bu
 			if ((be16_to_cpup((__be16 *) skb->data) != ETH_P_ARP) &&
 			    (be16_to_cpup((__be16 *) skb->data) != ETH_P_RARP)) {
 				ipoib_warn(priv, "Unicast, no %s: type %04x, QPN %06x %pI6\n",
-					   skb->dst ? "neigh" : "dst",
+					   skb_dst(skb) ? "neigh" : "dst",
 					   be16_to_cpup((__be16 *) skb->data),
 					   IPOIB_QPN(phdr->hwaddr),
 					   phdr->hwaddr + 4);
@@ -861,7 +861,7 @@ static int ipoib_hard_header(struct sk_b
 	 * destination address onto the front of the skb so we can
 	 * figure out where to send the packet later.
 	 */
-	if ((!skb->dst || !skb->dst->neighbour) && daddr) {
+	if ((!skb_dst(skb) || !skb_dst(skb)->neighbour) && daddr) {
 		struct ipoib_pseudoheader *phdr =
 			(struct ipoib_pseudoheader *) skb_push(skb, sizeof *phdr);
 		memcpy(phdr->hwaddr, daddr, INFINIBAND_ALEN);
Index: ofed_kernel-3.0/drivers/infiniband/ulp/ipoib/ipoib_multicast.c
===================================================================
--- ofed_kernel-3.0.orig/drivers/infiniband/ulp/ipoib/ipoib_multicast.c	2012-07-25 18:07:06.000000000 +0300
+++ ofed_kernel-3.0/drivers/infiniband/ulp/ipoib/ipoib_multicast.c	2012-07-25 18:07:36.000000000 +0300
@@ -263,7 +263,7 @@ static int ipoib_mcast_join_finish(struc
 
 		skb->dev = dev;
 
-		if (!skb->dst || !skb->dst->neighbour) {
+		if (!skb_dst(skb) || !skb_dst(skb)->neighbour) {
 			/* put pseudoheader back on for next time */
 			skb_push(skb, sizeof (struct ipoib_pseudoheader));
 		}
@@ -762,10 +762,10 @@ void ipoib_mcast_send(struct net_device 
 
 out:
 	if (mcast && mcast->ah) {
-		if (skb->dst		&&
-		    skb->dst->neighbour &&
-		    !*to_ipoib_neigh(skb->dst->neighbour)) {
-			struct ipoib_neigh *neigh = ipoib_neigh_alloc(skb->dst->neighbour,
+		if (skb_dst(skb)		&&
+		    skb_dst(skb)->neighbour &&
+		    !*to_ipoib_neigh(skb_dst(skb)->neighbour)) {
+			struct ipoib_neigh *neigh = ipoib_neigh_alloc(skb_dst(skb)->neighbour,
 									skb->dev);
 
 			if (neigh) {
