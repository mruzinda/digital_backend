diff --git a/drivers/net/mlx4/en_cq.c b/drivers/net/mlx4/en_cq.c
index 6e25f1c..b34d96f 100644
--- a/drivers/net/mlx4/en_cq.c
+++ b/drivers/net/mlx4/en_cq.c
@@ -34,6 +34,7 @@
 #include <linux/mlx4/cq.h>
 #include <linux/mlx4/qp.h>
 #include <linux/mlx4/cmd.h>
+#include <linux/delay.h>
 
 #include "mlx4_en.h"
 
@@ -131,8 +132,17 @@ int mlx4_en_activate_cq(struct mlx4_en_priv *priv, struct mlx4_en_cq *cq, int cq
 		} else
 			mlx4_en_arm_cq(priv, cq);
 	} else {
-		netif_napi_add(cq->dev, &cq->napi, mlx4_en_poll_rx_cq, MLX4_EN_RX_BUDGET);
-		napi_enable(&cq->napi);
+		char name[IFNAMSIZ];
+
+		snprintf(name, IFNAMSIZ, "mlx4_en-%d-%d", priv->port, cq->ring);
+		cq->poll_dev = alloc_netdev(0, name, ether_setup);
+		if (!cq->poll_dev)
+			return -ENOMEM;
+
+		cq->poll_dev->priv = cq;
+		cq->poll_dev->weight = 64;
+		cq->poll_dev->poll = mlx4_en_poll_rx_cq;
+		set_bit(__LINK_STATE_START, &cq->poll_dev->state);
 	}
 
 	return 0;
@@ -159,8 +169,11 @@ void mlx4_en_deactivate_cq(struct mlx4_en_priv *priv, struct mlx4_en_cq *cq)
 	struct mlx4_en_dev *mdev = priv->mdev;

 	if (!cq->is_tx) {
-		napi_disable(&cq->napi);
-		netif_napi_del(&cq->napi);
+		while (test_bit(__LINK_STATE_RX_SCHED,
+				&cq->poll_dev->state))
+			msleep(1);
+		free_netdev(cq->poll_dev);
+		cq->poll_dev = NULL;
 	}
 	
 
diff --git a/drivers/net/mlx4/en_netdev.c b/drivers/net/mlx4/en_netdev.c
index 19422d7..6b55d04 100644
--- a/drivers/net/mlx4/en_netdev.c
+++ b/drivers/net/mlx4/en_netdev.c
@@ -405,7 +405,8 @@ static void mlx4_en_netpoll(struct net_device *dev)
 	for (i = 0; i < priv->rx_ring_num; i++) {
 		cq = priv->rx_cq[i];
 		spin_lock_irqsave(&cq->lock, flags);
-		napi_synchronize(&cq->napi);
+		while (test_bit(__LINK_STATE_RX_SCHED, &cq->poll_dev->state))
+			msleep(1);
 		mlx4_en_process_rx_cq(dev, cq, 0);
 		spin_unlock_irqrestore(&cq->lock, flags);
 	}
@@ -917,8 +918,6 @@ void mlx4_en_stop_port(struct net_device *dev)
 	/* Free RX Rings */
 	for (i = 0; i < priv->rx_ring_num; i++) {
 		mlx4_en_deactivate_rx_ring(priv, priv->rx_ring[i]);
-		while (test_bit(NAPI_STATE_SCHED, &priv->rx_cq[i]->napi.state))
-			msleep(1);
 		mlx4_en_deactivate_cq(priv, priv->rx_cq[i]);
 	}
 }
diff --git a/drivers/net/mlx4/en_rx.c b/drivers/net/mlx4/en_rx.c
index 0149a14..ec0d725 100644
--- a/drivers/net/mlx4/en_rx.c
+++ b/drivers/net/mlx4/en_rx.c
@@ -711,38 +711,35 @@ void mlx4_en_rx_irq(struct mlx4_cq *mcq)
 
 	if (priv->port_up)
-		napi_schedule(&cq->napi);
+		netif_rx_schedule(cq->poll_dev);
 	else
 		mlx4_en_arm_cq(priv, cq);
 }
 
 /* Rx CQ polling - called by NAPI */
-int mlx4_en_poll_rx_cq(struct napi_struct *napi, int budget)
+int mlx4_en_poll_rx_cq(struct net_device *poll_dev, int *budget)
 {
-	struct mlx4_en_cq *cq = container_of(napi, struct mlx4_en_cq, napi);
+	struct mlx4_en_cq *cq = poll_dev->priv;
 	struct net_device *dev = cq->dev;
 	struct mlx4_en_priv *priv = netdev_priv(dev);
 	int done;
+	int work = min(*budget, poll_dev->quota);
 
-	done = mlx4_en_process_rx_cq(dev, cq, budget);
+	done = mlx4_en_process_rx_cq(dev, cq, work);
+
+	dev->quota -= done;
+	*budget -= done;
 
 	/* If we used up all the quota - we're probably not done yet... */
 	cq->tot_rx += done;
-	if (done == budget) {
+	if (done == work && cq->tot_rx < MIN_RX_ARM) {
 		INC_PERF_COUNTER(priv->pstats.napi_quota);
-		if (cq->tot_rx >= MIN_RX_ARM) {
-			napi_complete(napi);
-			mlx4_en_arm_cq(priv, cq);
-			cq->tot_rx = 0;
-			return 0;
-		}
-	} else {
-		/* Done for now */
-		napi_complete(napi);
-		mlx4_en_arm_cq(priv, cq);
-		cq->tot_rx = 0;
-		return done;
+		return 1;
 	}
-	return budget;
+	/* Done for now */
+	netif_rx_complete(poll_dev);
+	mlx4_en_arm_cq(priv, cq);
+	cq->tot_rx = 0;
+	return 0;
 }
 
 
diff --git a/drivers/net/mlx4/mlx4_en.h b/drivers/net/mlx4/mlx4_en.h
index 4401293..85b0229 100644
--- a/drivers/net/mlx4/mlx4_en.h
+++ b/drivers/net/mlx4/mlx4_en.h
@@ -375,7 +375,7 @@ struct mlx4_en_cq {
 	int                     ring;
 	spinlock_t              lock;
 	struct net_device      *dev;
-	struct napi_struct	napi;
+	struct net_device      *poll_dev; /* for napi */
 	int size;
 	int buf_size;
 	unsigned vector;
@@ -641,7 +641,7 @@ void mlx4_en_deactivate_rx_ring(struct mlx4_en_priv *priv,
 int mlx4_en_process_rx_cq(struct net_device *dev,
 			  struct mlx4_en_cq *cq,
 			  int budget);
-int mlx4_en_poll_rx_cq(struct napi_struct *napi, int budget);
+int mlx4_en_poll_rx_cq(struct net_device *poll_dev, int *budget);
 void mlx4_en_fill_qp_context(struct mlx4_en_priv *priv, int size, int stride,
 			     int is_tx, int rss, int qpn, int cqn,
 			     struct mlx4_qp_context *context);
